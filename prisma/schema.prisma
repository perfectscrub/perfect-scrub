generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Contractor {
  id                    String             @id @default(cuid())
  slug                  String             @unique
  firstname             String
  lastname              String
  businessName          String             @unique
  businessType          String
  email                 String             @unique
  phone                 String             @unique
  address               String
  city                  String
  postcode              String
  businessAddress       String
  businessCity          String
  province              String
  businessPostcode      String
  hasVehicle            String
  driversLicence        String?
  insurance             String
  employmentStatus      String
  availabilityDays      String
  locations             String[]
  experience            String
  experienceDescription String
  hasEquipment          String
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  emergencyContacts     EmergencyContact[]
  references            Reference[]
}

model Reference {
  id           Int        @id @default(autoincrement())
  name         String
  relationship String
  phone        String     @unique
  contractorId String
  contractor   Contractor @relation(fields: [contractorId], references: [id])
}

model EmergencyContact {
  id           Int        @id @default(autoincrement())
  name         String
  phone        String
  email        String
  contractorId String
  contractor   Contractor @relation(fields: [contractorId], references: [id])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}
